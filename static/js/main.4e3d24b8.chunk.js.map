{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cats","cardArray","map","user","index","components_Card","key","SearchBar","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this3","filterCat","filter","toLowerCase","includes","components_SearchBar","components_Scroll","components_CardList","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCJSC,EAZF,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oEACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,4BACrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCeLS,EAnBE,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,KACTC,EAAYD,EAAKE,IACnB,SAACC,EAAMC,GACH,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLb,GAAIS,EAAKI,GAAOb,GAChBF,KAAMW,EAAKI,GAAOf,KAClBC,MAAOU,EAAKI,GAAOd,UAKnC,OACIE,EAAAC,EAAAC,cAAA,WACKO,ICHEM,EAbG,SAAAnB,GAAmB,IAAjBoB,EAAiBpB,EAAjBoB,aAChB,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,SACIe,KAAK,SACLC,YAAa,gBACbf,UAAU,kDACVgB,SAAYH,MCCbI,EARA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,GAAIC,OAAQ,SAAUtB,UAAW,MACnEkB,EAAMK,WCsCRC,cArCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAP1CZ,EAAKa,MAAQ,CACTjC,KAAO,GACP8B,YAAc,IAJTV,mFAYM,IAAAc,EAAAX,KACfY,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAGL,EAAKL,SAAS,CAAC7B,KAAMuC,uCAGnC,IAAAC,EAAAjB,KAEEkB,EAAYlB,KAAKU,MAAMjC,KAAK0C,OAAO,SAAA1C,GACrC,OAAOA,EAAKX,KAAKsD,cAAcC,SAASJ,EAAKP,MAAMH,YAAYa,iBAGnE,OACAnD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MACZH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAWrC,aAAgBe,KAAKI,iBAChCnC,EAAAC,EAAAC,cAACoD,EAAD,CAAQnD,UAAW,MACfH,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,KAAQyC,aA9BhBO,aCElBC,IAASC,OAEL1D,EAAAC,EAAAC,cAACyD,EAAD,MACEC,SAASC,eAAe,SNsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.4e3d24b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    return (\r\n        <div className=\"tc bg-navy dib br3 pa3 ma2 grow sans-serif bw3 shadow-5 white-90\" >\r\n            <img alt='robots' src={`https://robohash.org/${id}?set=set4&size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({cats}) => {\r\n    const cardArray = cats.map(\r\n        (user, index) => {\r\n            return ( \r\n                <Card \r\n                    key={index}\r\n                    id={cats[index].id} \r\n                    name={cats[index].name}\r\n                    email={cats[index].email} \r\n                />\r\n            );\r\n        }\r\n    )\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\n\r\nconst SearchBar = ({searchChange}) =>{\r\n    return(\r\n        <div className=\"\" >\r\n            <input \r\n                type=\"search\"\r\n                placeholder= \"search kittes\" \r\n                className=\"pa1 ba b--blue bg-lightest-blue dib br3 ma2 bw1\"\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style= {{overflowY: 'scroll', border: '', height: '700px'}} className= \"tc\">\r\n                {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll","import React, {Component} from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBar from '../components/SearchBar'\r\nimport {cats} from '../components/cats'; \r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            cats : [],\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchField : event.target.value});\r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users=> this.setState({cats: users}));\r\n    }\r\n\r\n    render(){\r\n\r\n        const filterCat = this.state.cats.filter(cats =>{\r\n            return cats.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n\r\n        return (\r\n        <div className= \"tc\">\r\n            <h1>Kitty List :)</h1>\r\n            <SearchBar searchChange = {this.onSearchChange}/>\r\n            <Scroll className= \"tc\">\r\n                <CardList cats = {filterCat}/>\r\n            </Scroll>\r\n        </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App'\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <App/>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}